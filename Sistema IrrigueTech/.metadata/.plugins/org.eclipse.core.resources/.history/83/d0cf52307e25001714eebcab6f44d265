package com.joice.sistemaIrrigamento.view;

/**
 * 
 * @author Joice Marques
 * @since 10/04/2017
 * @category model
 * 
 */
		
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JComboBox;
import com.joice.sistemaIrrigamento.model.ConnectionModel;
import com.joice.sistemaIrrigamento.model.ModeloTabela;

import javax.swing.JTextField;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import java.awt.Font;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTable;

public class AtendimentoView extends JFrame {

	private JPanel contentPane;
	private JTextField tDataAtendimento;
	private JComboBox<String> cbEquipe;
	private JTextField txNomeCli;
	private JTable tbMagueira;
	private JFormattedTextField txDescricaoAtendimento;
	private JLabel lbData;
	private JLabel lblEquipe;
	private JLabel lblDescrioAtendimento;
	private JLabel lbCliente;
	private JButton btnEncerrar;
	private JButton btnSalvar;
	
	private String nome;
	private String id;
	
	ConnectionModel conn = new ConnectionModel();
	PreparedStatement pst = null;
	ResultSet rs = null;

	//metodo recebe string do nome da empresa da classe PrincipalView
	public AtendimentoView(String nome, String id) throws SQLException {
		this.nome = nome;
		this.id = id;
			
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 600, 400);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		cbEquipe = new JComboBox();
		cbEquipe.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		cbEquipe.setBounds(326, 193, 209, 20);
		contentPane.add(cbEquipe);
		
		tDataAtendimento = new JTextField();
		tDataAtendimento.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		tDataAtendimento.setBounds(46, 193, 118, 20);
		contentPane.add(tDataAtendimento);
		tDataAtendimento.setColumns(10);
				
		txDescricaoAtendimento = new JFormattedTextField();
		txDescricaoAtendimento.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		txDescricaoAtendimento.setBounds(46, 240, 489, 76);
		contentPane.add(txDescricaoAtendimento);
		
		lbData = new JLabel("Data Atendimento:");
		lbData.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		lbData.setBounds(46, 165, 118, 34);
		contentPane.add(lbData);
		
		lblEquipe = new JLabel("Equipe:");
		lblEquipe.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		lblEquipe.setBounds(326, 172, 67, 20);
		contentPane.add(lblEquipe);
		
		lblDescrioAtendimento = new JLabel("Descri\u00E7\u00E3o Atendimento:");
		lblDescrioAtendimento.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		lblDescrioAtendimento.setBounds(46, 211, 177, 34);
		contentPane.add(lblDescrioAtendimento);
		
		lbCliente = new JLabel("Cliente:");
		lbCliente.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		lbCliente.setBounds(46, 11, 118, 14);
		contentPane.add(lbCliente);
		
		txNomeCli = new JTextField();
		txNomeCli.setEditable(false);
		txNomeCli.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		txNomeCli.setBounds(46, 25, 489, 20);
		contentPane.add(txNomeCli);
		txNomeCli.setColumns(10);
		txNomeCli.setText(nome);
		
		btnEncerrar = new JButton("Encerrar");
		btnEncerrar.setBounds(446, 327, 89, 23);
		contentPane.add(btnEncerrar);
		
		btnSalvar = new JButton("Salvar");
		btnSalvar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				try {
					String sql = "INSERT INTO atendimento (data_atendimento, descricao_atendimento, id_equipe, id_chamado) values(?, ?, ?, ?);";
					gravaDadosAtendimento(sql);
				} catch (SQLException e) {
					System.out.println(e.getMessage());
				}
			}
		});
		btnSalvar.setBounds(347, 327, 89, 23);
		contentPane.add(btnSalvar);
		
		tbMagueira = new JTable();
		tbMagueira.setBounds(46, 56, 489, 98);
		contentPane.add(tbMagueira);
		
		this.equipeComboBox();
		
	}
	
	//preenche tabela com dados das mangueiras do cliente selecionado
	public void preencherMangueira(String sql) throws SQLException{
		ArrayList dados = new ArrayList();
		String[] colunas = new String[]{"ID Mangueira", "Quantidade de Bicos", "Status"};
		
		pst = conn.getConexao().prepareStatement(sql);
		rs = pst.executeQuery();
		
		try {
			while(rs.next()){
				dados.add(new Object[]{rs.getString("id_mangueira"), rs.getString("quantidade_bicos"), rs.getString("status_mangueira")});
			}			
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		ModeloTabela modelo = new ModeloTabela(dados, colunas);
		tbMagueira.setModel(modelo);
		pst.close();
    }
	
	//popula comboBox com dados das equipes 
	public void equipeComboBox() throws SQLException{
		String sql = "SELECT * FROM equipe";		
		try {
			pst = conn.getConexao().prepareStatement(sql);
			rs = pst.executeQuery();
			
			while(rs.next()){
				cbEquipe.addItem(rs.getString("nome_equipe"));
			}		
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}
	
	//grava dados do atendimento a partir de uma string recebidas
	public void gravaDadosAtendimento(String sql) throws SQLException{
		pst = conn.getConexao().prepareStatement(sql);
		pst.setString(1, tDataAtendimento.getText());
		pst.setString(2, txDescricaoAtendimento.getText());
		pst.setInt(3, 1);
		pst.setInt(4, 1);
		pst.execute();
	}
}
